#include "lspconfiguration.h"
#include "files/extensions.h"
#include "lsp/clangversion.h"
#include <optional>
#include <string>

namespace {

/// Locate compile_commands.json file that hopefully is generated by the build
/// system
std::filesystem::path locateClangCompileCommands() {
    for (auto &it : std::filesystem::recursive_directory_iterator{
             std::filesystem::current_path()}) {
        if (it.path().filename() == "compile_commands.json") {
            return it.path().parent_path();
        }
    }

    return {};
}

std::string getClangLspCommand() {
    auto args = std::string{"--log=error "}; //   std::string{"--log=info "};

    auto compileCommandsPath = locateClangCompileCommands();

    if (!compileCommandsPath.empty()) {
        args +=
            " --compile-commands-dir=\"" + compileCommandsPath.string() + "\"";
    }

    auto command = lsp::getClangVersion().string() + " " + args;

    return command;
}

std::string getGoLspCommand() {
    return "gopls";
}

} // namespace

// LspConfiguration::LspConfiguration(std::filesystem::path extension) {
//     if (extension == ".cpp") {
//         command = getClangLspCommand();
//         isFileSupported = [](auto path) {
//             return isCpp(path) || isCSource(path);
//         };
//         return;
//     }

//    if (extension == ".go") {
//        command = getGoLspCommand();
//        isFileSupported = [](auto path) { return isGo(path); };
//        return;
//    }
//}

std::optional<LspConfiguration> LspConfiguration::getConfiguration(
    std::filesystem::path path) {
    auto extension = path.extension();

    auto ret = std::optional<LspConfiguration>{};

    {
        auto isAnyCpp = [](auto path) {
            return isCpp(path) || isCSource(path);
        };

        if (isAnyCpp(path)) {
            ret = LspConfiguration{};
            ret->command = getClangLspCommand();
            ret->isFileSupported = isAnyCpp;
            return ret;
        }
    }

    if (extension == ".go") {
        ret = LspConfiguration{};
        ret->command = getGoLspCommand();
        ret->isFileSupported = [](auto path) { return isGo(path); };
        return ret;
    }

    return ret;
}
